See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (1 warning)
PMD:          FAILED (7 warnings)
Checkstyle:   FAILED (0 errors, 21 warnings)

Correctness:  68/68 tests passed
Memory:       10/10 tests passed
Timing:       148/159 tests passed

Aggregate score: 98.62%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.5K Nov  6 18:41 BurrowsWheeler.java
2.7K Nov  6 18:41 CircularSuffixArray.java
2.5K Nov  6 18:41 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 CircularSuffixArray.java
*-----------------------------------------------------------

% javac11 BurrowsWheeler.java
*-----------------------------------------------------------

% javac11 MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method BurrowsWheeler.makeNext(char[], int) has unused parameters  At BurrowsWheeler.java:[lines 70-84]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
BurrowsWheeler.java:52: Avoid unused parameter variables, such as 'first'. [UnusedFormalParameter]
BurrowsWheeler.java:54: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
BurrowsWheeler.java:55: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
BurrowsWheeler.java:116: Use asList instead of tight loops [UseArraysAsList]
CircularSuffixArray.java:13: The private instance (or static) variable 'len' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:14: The private instance (or static) variable 'suffixes' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:15: The private instance (or static) variable 's' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 7 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:28:17: The local variable 'last_pos' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BurrowsWheeler.java:33:26: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] MoveToFront.java:11:25: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] MoveToFront.java:43:25: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:1: Use the 'equals()' method to check whether the command-line argument is '+' or '-'. [Design]
[WARN] BurrowsWheeler.java:13:1: There is no need to define nested classes in this program. [Design]
[WARN] BurrowsWheeler.java:53:21: Using interface inheritance suggests poor design in this program. [Design]
[WARN] BurrowsWheeler.java:111:16: You will probably not meet the performance requirement for 'inverseTransform()' if you call 'Arrays.sort()'. [Performance]
[WARN] BurrowsWheeler.java:114:9: You should not need to use the 'ArrayList' data type in this program. [Design]
[WARN] BurrowsWheeler.java:114:41: You should not need to create objects of type 'java.util.ArrayList' in this program. [Design]
[WARN] BurrowsWheeler.java:121:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:122:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:123:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:124:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:146:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
Checkstyle ends with 0 errors and 11 warning.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------
[INFO] MoveToFront.java:16:9: Using the 'ArrayList' data type in this program may lead to poor performance. Consider using an array instead. [Performance]
[INFO] MoveToFront.java:49:9: Using the 'ArrayList' data type in this program may lead to poor performance. Consider using an array instead. [Performance]
[WARN] MoveToFront.java:1: Use the 'equals()' method to check whether the command-line argument is '+' or '-'. [Design]
[WARN] MoveToFront.java:1:1: The constant '256' appears more than once. Define a constant variable (such as 'EXTENDED_ASCII') to hold the constant '256'. [NumericLiteralCount]
[WARN] MoveToFront.java:16: Creating more than one object per call to 'encode()' can degrade performance. [Performance]
[WARN] MoveToFront.java:16:37: Using the 'java.util.ArrayList' data type in this program may lead to poor performance. Consider using an array instead. [Performance]
[WARN] MoveToFront.java:49: Creating more than one object per call to 'decode()' can degrade performance. [Performance]
[WARN] MoveToFront.java:49:37: Using the 'java.util.ArrayList' data type in this program may lead to poor performance. Consider using an array instead. [Performance]
Checkstyle ends with 0 errors and 6 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 6: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 9: check that constructor throws an exception when argument is null
==> passed

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 11: check that CircularSuffixArray is immutable
  * string = "PCNXPNBYQJDDTCACAPSNKVCXLPEMCY"
  * string = "BBAABBAABBBBABBABAAAABAAABBABB"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: fe 1e c9 7c 66 54 47 4e ee e4 7f d8 77 27 ad 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 15/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 3a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 3b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 4a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 4b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 5b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 5c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 6b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 6d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 7a: check that encode() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 7b: check that decode() calls either close() or flush()
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 8a: check encode() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check decode() on large files
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 8c: check whether decode(encode()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 28 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 3a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 4b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 4c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 5a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 5c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 5d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 6b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 6c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 6e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 7a: check that transform() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 7b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 8a: check transform() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check inverseTransform() on large files
  * rand100K.bin.bwt
  * world192.txt.bwt
==> passed

Test 8c: check that inverseTransform(transform()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 28/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          776
=> passed       32         1432
=> passed       64         2744
=> passed      128         5368
=> passed      256        10616
=> passed      512        21112
=> passed     1024        42104
=> passed     2048        84088
=> passed     4096       168056
=> passed     8192       335992
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 41.00 n + 120.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      13.36
=> passed     2000       0.00       0.00       7.39
=> passed     4000       0.00       0.00       4.55
=> passed     8000       0.01       0.00       3.48
=> passed    16000       0.01       0.00       4.04
=> passed    32000       0.02       0.00       5.90
=> passed    64000       0.07       0.01      11.07
=> passed   128000       0.25       0.02      15.26
=> passed   256000       0.32       0.02      14.48
=> passed   512000       0.54       0.05      11.44
=> FAILED  1024000       1.36       0.10      13.27
=> FAILED  2048000       3.29       0.24      13.54
=> FAILED  4096000       7.64       0.55      13.94

Estimated running time (using last 6 measurements)
    = 1.01e-06 * n^1.03  (R^2 = 0.97)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       6.70
=> passed     2000       0.00       0.00       4.51
=> passed     4000       0.00       0.00       4.42
=> passed     8000       0.00       0.00       7.45
=> passed    16000       0.01       0.00      10.59
=> passed    32000       0.01       0.00      13.52
=> passed    64000       0.03       0.00      12.38
=> passed   128000       0.07       0.00      15.33
=> passed   256000       0.17       0.01      12.87
=> passed   512000       0.41       0.03      13.74
=> passed  1024000       0.97       0.05      18.87
=> FAILED  2048000       2.27       0.09      24.65
=> FAILED  4096000       5.20       0.25      20.52

Estimated running time (using last 6 measurements)
    = 3.15e-08 * n^1.24  (R^2 = 1.00)


Total: 21/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.94
=> passed     2000       0.00       0.00       1.48
=> passed     4000       0.01       0.00       1.62
=> passed     8000       0.01       0.01       1.50
=> passed    16000       0.02       0.01       1.51
=> passed    32000       0.04       0.03       1.52
=> passed    64000       0.08       0.05       1.43
=> passed   128000       0.15       0.10       1.54
=> passed   256000       0.31       0.19       1.57

Estimated running time (using last 6 measurements)
     = 1.28e-06 * n^0.99  (R^2 = 1.00)


Tests  13-20: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.57
=> passed     2000       0.00       0.00       1.58
=> passed     4000       0.00       0.00       1.57
=> passed     8000       0.01       0.01       1.56
=> passed    16000       0.02       0.01       1.56
=> passed    32000       0.04       0.02       1.57
=> passed    64000       0.07       0.05       1.57
=> passed   128000       0.14       0.09       1.57
=> passed   256000       0.29       0.18       1.59

Estimated running time (using last 6 measurements)
     = 1.07e-06 * n^1.00  (R^2 = 1.00)


Tests 21-29: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.47
=> passed     2000       0.00       0.00       1.48
=> passed     4000       0.00       0.00       1.50
=> passed     8000       0.01       0.01       1.51
=> passed    16000       0.02       0.01       1.55
=> passed    32000       0.04       0.02       1.48
=> passed    64000       0.07       0.05       1.53
=> passed   128000       0.15       0.10       1.56
=> passed   256000       0.30       0.19       1.55

Estimated running time (using last 6 measurements)
     = 1.21e-06 * n^1.00  (R^2 = 1.00)


Tests 30-38: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.60
=> passed     2000       0.00       0.00       1.58
=> passed     4000       0.00       0.00       1.58
=> passed     8000       0.01       0.01       1.58
=> passed    16000       0.02       0.01       1.56
=> passed    32000       0.04       0.02       1.68
=> passed    64000       0.08       0.05       1.66
=> passed   128000       0.14       0.09       1.57
=> passed   256000       0.29       0.18       1.59

Estimated running time (using last 6 measurements)
     = 1.13e-06 * n^1.00  (R^2 = 1.00)


Total: 38/38 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 95 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  5-17: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.07
=> passed     2000       0.00       0.00       0.80
=> passed     4000       0.00       0.00       0.80
=> passed     8000       0.00       0.00       0.86
=> passed    16000       0.00       0.00       0.98
=> passed    32000       0.01       0.01       0.86
=> passed    64000       0.02       0.02       0.87
=> passed   128000       0.02       0.02       1.14
=> passed   256000       0.04       0.03       1.28
=> passed   512000       0.06       0.06       1.10
=> passed  1024000       0.14       0.13       1.13
=> passed  2048000       0.30       0.28       1.08
=> passed  4096000       0.71       0.72       0.99

Estimated running time as a function of n (using last 6 measurements)
    = 1.28e-07 * n^1.01  (R^2 = 0.99)


Tests 18-30: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.22
=> passed     2000       0.00       0.00       1.40
=> passed     4000       0.00       0.00       1.07
=> passed     8000       0.00       0.00       1.06
=> passed    16000       0.00       0.00       1.08
=> passed    32000       0.00       0.00       1.22
=> passed    64000       0.01       0.01       1.11
=> passed   128000       0.02       0.01       1.07
=> passed   256000       0.03       0.03       1.08
=> passed   512000       0.07       0.06       1.09
=> passed  1024000       0.16       0.14       1.11
=> passed  2048000       0.36       0.33       1.08
=> passed  4096000       0.77       0.71       1.09

Estimated running time as a function of n (using last 6 measurements)
    = 2.22e-08 * n^1.14  (R^2 = 1.00)


Tests 31-43: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.81
=> passed     2000       0.00       0.00       0.99
=> passed     4000       0.00       0.00       1.03
=> passed     8000       0.00       0.00       1.00
=> passed    16000       0.00       0.00       1.00
=> passed    32000       0.00       0.00       1.24
=> passed    64000       0.00       0.00       0.99
=> passed   128000       0.00       0.00       1.04
=> passed   256000       0.01       0.00       1.07
=> passed   512000       0.01       0.01       1.03
=> passed  1024000       0.02       0.02       1.03
=> passed  2048000       0.04       0.04       1.03
=> passed  4096000       0.09       0.09       0.97

Estimated running time as a function of n (using last 6 measurements)
    = 1.92e-08 * n^1.01  (R^2 = 1.00)


Tests 44-56: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       4.70
=> passed     2000       0.00       0.00       3.67
=> passed     4000       0.00       0.00       3.03
=> passed     8000       0.00       0.00       2.41
=> passed    16000       0.01       0.00       3.78
=> passed    32000       0.01       0.00       6.91
=> passed    64000       0.03       0.00       8.58
=> passed   128000       0.04       0.01       6.59
=> passed   256000       0.07       0.01      11.64
=> FAILED   512000       0.14       0.01       9.35
=> FAILED  1024000       0.30       0.04       8.32
=> passed  2048000       0.49       0.15       3.18
=> passed  4096000       0.93       0.39       2.36

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 7.01e-07 * n^0.93  (R^2 = 1.00)


Tests 57-69: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00      14.59
=> passed     2048       0.00       0.00      11.08
=> passed     4096       0.00       0.00       5.64
=> passed     8192       0.00       0.00       5.18
=> passed    16384       0.00       0.00       5.29
=> passed    32768       0.00       0.00       5.17
=> passed    65536       0.01       0.00       4.86
=> passed   131072       0.01       0.00       5.34
=> passed   262144       0.03       0.01       4.63
=> passed   524288       0.06       0.02       3.79
=> passed  1048576       0.13       0.03       3.59
=> passed  2097152       0.36       0.19       1.91
=> passed  4194304       0.83       0.46       1.81

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 7.75e-09 * n^1.21  (R^2 = 1.00)


Tests 70-82: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       3.43
=> passed     2000       0.00       0.00       3.04
=> passed     4000       0.00       0.00       2.74
=> passed     8000       0.00       0.00       1.93
=> passed    16000       0.00       0.00       1.36
=> passed    32000       0.00       0.00       1.99
=> passed    64000       0.00       0.00       1.96
=> passed   128000       0.00       0.00       2.00
=> passed   256000       0.02       0.00       3.59
=> passed   512000       0.03       0.02       1.90
=> passed  1024000       0.07       0.02       3.43
=> passed  2048000       0.14       0.07       2.09
=> passed  4096000       0.28       0.14       2.07

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 1.02e-08 * n^1.13  (R^2 = 0.99)


Tests 83-95: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       4.63
=> passed     2048       0.00       0.00       3.99
=> passed     4096       0.00       0.00       3.01
=> passed     8192       0.00       0.00       4.90
=> passed    16384       0.00       0.00       2.70
=> passed    32768       0.00       0.00       2.38
=> passed    65536       0.00       0.00       2.62
=> passed   131072       0.01       0.00       1.83
=> passed   262144       0.02       0.01       2.02
=> passed   524288       0.03       0.02       1.48
=> passed  1048576       0.07       0.04       1.69
=> passed  2097152       0.14       0.07       2.00
=> passed  4194304       0.25       0.21       1.18

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 2.89e-08 * n^1.06  (R^2 = 0.99)


Total: 89/95 tests passed!


================================================================