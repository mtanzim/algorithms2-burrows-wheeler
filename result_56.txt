See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (1 warning)
PMD:          FAILED (6 warnings)
Checkstyle:   FAILED (0 errors, 23 warnings)

Correctness:  38/68 tests passed
Memory:       0/10 tests passed
Timing:       103/159 tests passed

Aggregate score: 56.49%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.1K Oct 31 11:35 BurrowsWheeler.java
2.4K Oct 31 11:35 CircularSuffixArray.java
2.5K Oct 31 11:35 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 CircularSuffixArray.java
*-----------------------------------------------------------

% javac11 BurrowsWheeler.java
*-----------------------------------------------------------

% javac11 MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method BurrowsWheeler.makeNext(char[], int) has unused parameters  At BurrowsWheeler.java:[lines 87-101]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
BurrowsWheeler.java:69: Avoid unused parameter variables, such as 'first'. [UnusedFormalParameter]
BurrowsWheeler.java:71: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
BurrowsWheeler.java:72: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
BurrowsWheeler.java:133: Use asList instead of tight loops [UseArraysAsList]
CircularSuffixArray.java:13: The private instance (or static) variable 'len' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:14: The private instance (or static) variable 'suffixes' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 6 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] MoveToFront.java:11:25: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] MoveToFront.java:43:25: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------
[WARN] CircularSuffixArray.java:64:31: Do not print to standard output in 'CircularSuffixArray()'. [SideEffect]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:1: Use the 'equals()' method to check whether the command-line argument is '+' or '-'. [Design]
[WARN] BurrowsWheeler.java:13:1: There is no need to define nested classes in this program. [Design]
[WARN] BurrowsWheeler.java:26:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:31:9: You should not need to use the 'ArrayList' data type in this program. [Design]
[WARN] BurrowsWheeler.java:31:44: You should not need to create objects of type 'java.util.ArrayList' in this program. [Design]
[WARN] BurrowsWheeler.java:70:21: Using interface inheritance suggests poor design in this program. [Design]
[WARN] BurrowsWheeler.java:128:16: You will probably not meet the performance requirement for 'inverseTransform()' if you call 'Arrays.sort()'. [Performance]
[WARN] BurrowsWheeler.java:131:9: You should not need to use the 'ArrayList' data type in this program. [Design]
[WARN] BurrowsWheeler.java:131:41: You should not need to create objects of type 'java.util.ArrayList' in this program. [Design]
[WARN] BurrowsWheeler.java:138:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:139:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:140:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:141:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
[WARN] BurrowsWheeler.java:163:27: You must use 'BinaryStdOut' for all output in this program. [SideEffect]
Checkstyle ends with 0 errors and 14 warnings.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------
[INFO] MoveToFront.java:16:9: Using the 'ArrayList' data type in this program may lead to poor performance. Consider using an array instead. [Performance]
[INFO] MoveToFront.java:49:9: Using the 'ArrayList' data type in this program may lead to poor performance. Consider using an array instead. [Performance]
[WARN] MoveToFront.java:1: Use the 'equals()' method to check whether the command-line argument is '+' or '-'. [Design]
[WARN] MoveToFront.java:1:1: The constant '256' appears more than once. Define a constant variable (such as 'EXTENDED_ASCII') to hold the constant '256'. [NumericLiteralCount]
[WARN] MoveToFront.java:16: Creating more than one object per call to 'encode()' can degrade performance. [Performance]
[WARN] MoveToFront.java:16:37: Using the 'java.util.ArrayList' data type in this program may lead to poor performance. Consider using an array instead. [Performance]
[WARN] MoveToFront.java:49: Creating more than one object per call to 'decode()' can degrade performance. [Performance]
[WARN] MoveToFront.java:49:37: Using the 'java.util.ArrayList' data type in this program may lead to poor performance. Consider using an array instead. [Performance]
Checkstyle ends with 0 errors and 6 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 6: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
    - throws wrong exception when calling index(-2)
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.lang.IllegalArgumentException

  * string of length 100
    - throws wrong exception when calling index(-2)
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.lang.IllegalArgumentException

  * string of length 2
    - throws wrong exception when calling index(-2)
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.lang.IllegalArgumentException

  * string of length 1
    - throws wrong exception when calling index(-2)
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.lang.IllegalArgumentException

  * string of length 0
    - throws wrong exception when calling index(-2)
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 9: check that constructor throws an exception when argument is null
    - throws the wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 11: check that CircularSuffixArray is immutable
  * string = "MRSVVOLQUBLRIECNGOBAQSISYSHCPX"
  * string = "BBBBBBABAAAABAABAAABBBBBABABAB"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: 2f 41 67 74 71 26 74 25 87 92 fc 22 0f 02 d3 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 13/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 3a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 3b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 4a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 4b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 5b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 5c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 6b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 6d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 7a: check that encode() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 7b: check that decode() calls either close() or flush()
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 8a: check encode() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check decode() on large files
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 8c: check whether decode(encode()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 28 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 3a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 4b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 4c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 5a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 5c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 5d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 6b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 6c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 6e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 7a: check that transform() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 7b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 8a: check transform() on large files
  * rand100K.bin
  * world192.txt


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.



Total: 0/28 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> FAILED       16         1976
=> FAILED       32         4408
=> FAILED       64        10808
=> FAILED      128        29752
=> FAILED      256        92216
=> FAILED      512       315448
=> FAILED     1024      1155128
=> FAILED     2048      4407352
=> FAILED     4096     17203256
=> FAILED     8192     67960888
==> 0/10 tests passed

Total: 0/10 tests passed!

Estimated student memory (bytes) = 1.00 n^2 + 104.00 n + 56.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.04       0.00      60.09
=> passed     2000       0.03       0.00      44.94
=> passed     4000       0.06       0.00      59.90
=> FAILED     8000       0.16       0.00     134.43
=> FAILED    16000       0.75       0.00     320.11

    java.lang.OutOfMemoryError: Java heap space

    java.base/java.lang.StringUTF16.compress(StringUTF16.java:160)
    java.base/java.lang.String.<init>(String.java:3257)
    java.base/java.lang.String.<init>(String.java:286)
    CircularSuffixArray$CircularSuffix.<init>(CircularSuffixArray.java:22)
    CircularSuffixArray.<init>(CircularSuffixArray.java:59)
    TimeCircularSuffixArray.timeStudent(TimeCircularSuffixArray.java:29)
    TimeCircularSuffixArray.table(TimeCircularSuffixArray.java:85)
    TimeCircularSuffixArray.test1(TimeCircularSuffixArray.java:152)
    TimeCircularSuffixArray.main(TimeCircularSuffixArray.java:180)

=> FAILED    32000   Infinity       0.01   Infinity
=> FAILED    64000
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

Estimated running time (using last 5 measurements)
    = 8.00e-06 * n^1.13  (R^2 = 0.85)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00      20.83
=> passed     2000       0.01       0.00      44.64
=> passed     4000       0.05       0.00      99.27
=> FAILED     8000       0.16       0.00     314.21
=> FAILED    16000       0.73       0.00     833.82
=> FAILED    32000       2.76       0.00    1988.10

    java.lang.OutOfMemoryError: Java heap space

    java.base/java.lang.StringUTF16.compress(StringUTF16.java:160)
    java.base/java.lang.String.<init>(String.java:3257)
    java.base/java.lang.String.<init>(String.java:286)
    CircularSuffixArray$CircularSuffix.<init>(CircularSuffixArray.java:22)
    CircularSuffixArray.<init>(CircularSuffixArray.java:59)
    TimeCircularSuffixArray.timeStudent(TimeCircularSuffixArray.java:29)
    TimeCircularSuffixArray.table(TimeCircularSuffixArray.java:85)
    TimeCircularSuffixArray.test2(TimeCircularSuffixArray.java:169)
    TimeCircularSuffixArray.main(TimeCircularSuffixArray.java:181)

=> FAILED    64000   Infinity       0.00   Infinity
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

Estimated running time (using last 6 measurements)
    = 6.10e-09 * n^1.92  (R^2 = 1.00)


Total: 6/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.02
=> passed     2000       0.00       0.00       1.49
=> passed     4000       0.01       0.00       1.64
=> passed     8000       0.01       0.01       1.52
=> passed    16000       0.02       0.01       1.52
=> passed    32000       0.04       0.03       1.53
=> passed    64000       0.08       0.06       1.34
=> passed   128000       0.15       0.10       1.55
=> passed   256000       0.31       0.19       1.58

Estimated running time (using last 6 measurements)
     = 1.32e-06 * n^0.99  (R^2 = 1.00)


Tests  13-20: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.58
=> passed     2000       0.00       0.00       1.57
=> passed     4000       0.00       0.00       1.57
=> passed     8000       0.01       0.01       1.57
=> passed    16000       0.02       0.01       1.58
=> passed    32000       0.04       0.02       1.58
=> passed    64000       0.07       0.05       1.59
=> passed   128000       0.14       0.09       1.58
=> passed   256000       0.29       0.18       1.60

Estimated running time (using last 6 measurements)
     = 1.08e-06 * n^1.00  (R^2 = 1.00)


Tests 21-29: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.50
=> passed     2000       0.00       0.00       1.49
=> passed     4000       0.00       0.00       1.50
=> passed     8000       0.01       0.01       1.52
=> passed    16000       0.02       0.01       1.52
=> passed    32000       0.04       0.02       1.53
=> passed    64000       0.07       0.05       1.54
=> passed   128000       0.15       0.09       1.55
=> passed   256000       0.30       0.19       1.58

Estimated running time (using last 6 measurements)
     = 1.19e-06 * n^1.00  (R^2 = 1.00)


Tests 30-38: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.57
=> passed     2000       0.00       0.00       1.58
=> passed     4000       0.00       0.00       1.57
=> passed     8000       0.01       0.01       1.57
=> passed    16000       0.02       0.01       1.57
=> passed    32000       0.04       0.02       1.60
=> passed    64000       0.07       0.05       1.57
=> passed   128000       0.14       0.09       1.58
=> passed   256000       0.29       0.18       1.59

Estimated running time (using last 6 measurements)
     = 1.09e-06 * n^1.00  (R^2 = 1.00)


Total: 38/38 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 95 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  5-17: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00       8.30
=> passed     2000       0.05       0.00      77.74
=> passed     4000       0.03       0.00      41.11
=> FAILED     8000       0.21       0.00     154.70
=> FAILED    16000       0.68       0.00     237.09
=> FAILED    32000       2.69       0.00     579.79
=> FAILED    64000
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

Estimated running time as a function of n (using last 6 measurements)
    = 4.03e-07 * n^1.48  (R^2 = 0.94)


Tests 18-30: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.02       0.00      92.65
=> passed     2000       0.02       0.00     117.46
=> passed     4000       0.05       0.00     124.09
=> FAILED     8000       0.24       0.00     334.87
=> FAILED    16000       0.98       0.00     585.26
=> FAILED    32000       3.77       0.00    1038.85
=> FAILED    64000
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

Estimated running time as a function of n (using last 6 measurements)
    = 1.09e-07 * n^1.64  (R^2 = 0.96)


Tests 31-43: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.02       0.00     231.69
=> passed     2000       0.02       0.00     110.10
=> passed     4000       0.05       0.00     190.34
=> FAILED     8000       0.26       0.00     487.98
=> FAILED    16000       1.03       0.00     968.08
=> FAILED    32000       4.12       0.00    6363.65
=> FAILED    64000
=> FAILED   128000
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

Estimated running time as a function of n (using last 6 measurements)
    = 9.33e-08 * n^1.66  (R^2 = 0.93)


Tests 44-56: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       6.20
=> passed     2000       0.00       0.00       5.37
=> passed     4000       0.00       0.00       5.12
=> passed     8000       0.00       0.00       3.85
=> passed    16000       0.01       0.00       3.52
=> passed    32000       0.01       0.00       3.99
=> passed    64000       0.01       0.00       3.57
=> passed   128000       0.03       0.01       5.38
=> passed   256000       0.06       0.01      10.64
=> FAILED   512000       0.12       0.01       8.31
=> FAILED  1024000       0.26       0.03       8.13
=> passed  2048000       0.55       0.09       5.96
=> passed  4096000       0.81       0.32       2.55

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 3.88e-07 * n^0.96  (R^2 = 0.99)


Tests 57-69: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       7.70
=> passed     2048       0.00       0.00       7.94
=> passed     4096       0.00       0.00       3.82
=> passed     8192       0.00       0.00       4.13
=> passed    16384       0.00       0.00       4.42
=> passed    32768       0.00       0.00       4.31
=> passed    65536       0.01       0.00       4.51
=> passed   131072       0.01       0.00       5.34
=> passed   262144       0.03       0.01       4.67
=> passed   524288       0.06       0.01       3.70
=> passed  1048576       0.12       0.03       3.57
=> passed  2097152       0.28       0.08       3.56
=> passed  4194304       0.68       0.35       1.96

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 1.53e-08 * n^1.15  (R^2 = 1.00)


Tests 70-82: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       3.53
=> passed     2000       0.00       0.00       3.52
=> passed     4000       0.00       0.00       2.66
=> passed     8000       0.00       0.00       2.21
=> passed    16000       0.00       0.00       2.13
=> passed    32000       0.00       0.00       2.29
=> passed    64000       0.00       0.00       2.19
=> passed   128000       0.01       0.00       2.28
=> passed   256000       0.01       0.00       2.77
=> passed   512000       0.03       0.01       3.34
=> passed  1024000       0.05       0.02       2.96
=> passed  2048000       0.11       0.04       2.99
=> passed  4096000       0.25       0.07       3.50

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 1.52e-08 * n^1.09  (R^2 = 1.00)


Tests 83-95: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       3.50
=> passed     2048       0.00       0.00       4.50
=> passed     4096       0.00       0.00       7.91
=> passed     8192       0.00       0.00       2.04
=> passed    16384       0.00       0.00       3.62
=> passed    32768       0.00       0.00       2.83
=> passed    65536       0.00       0.00       2.82
=> passed   131072       0.01       0.00       3.23
=> passed   262144       0.02       0.01       2.05
=> passed   524288       0.03       0.02       1.74
=> passed  1048576       0.07       0.04       1.75
=> passed  2097152       0.13       0.08       1.68
=> passed  4194304       0.27       0.20       1.38

==> FAILED.   inverseTransform() is possibly n*R or n log n.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 3.78e-08 * n^1.04  (R^2 = 1.00)


Total: 59/95 tests passed!


================================================================